
Problem ::  1051. Height Checker

A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. 
Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.
You are given an integer array heights representing the current order that the students are standing in. 
Each heights[i] is the height of the ith student in line (0-indexed).

Return the number of indices where heights[i] != expected[i].

Time Complexity :: O(N)
Space Complexity :: O(N)

Code ::

class Solution {
public:
    int heightChecker(vector<int>& heights) {
        // O*nlogn TC
        // vector<int>v(heights.begin(),heights.end());
        // sort(v.begin(),v.end());
        // int cnt=0;
        // for(int i=0;i<v.size();i++){
        //     if(v[i]!=heights[i])cnt++;
        // }
        // return cnt;

        // Counting sort O(n)
        int cnt=0;
        int n= heights.size();
        vector<int>v(101);
        for(int i=0 ;i<n;i++){
            v[heights[i]]++;
        }

        for(int i=1;i<101;i++ ){
            v[i] = v[i] + v[i-1];

        }
        vector<int>expected(n);
        for(int i= n-1;i>=0;i--){
             expected[--v[heights[i]]] = heights[i];

        }
         int result = 0; 
        for (int i = 0; i < n; i++) {
            if (heights[i] != expected[i]) {
                result++;
            }
        }
            return result;
    }
};
